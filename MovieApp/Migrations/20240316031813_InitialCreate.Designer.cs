// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieApp.Data;

#nullable disable

namespace MovieApp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240316031813_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieApp.Models.Binge", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Userid")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("timespan")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Userid");

                    b.ToTable("Binges");
                });

            modelBuilder.Entity("MovieApp.Models.Show", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Userid")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("timespan")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Userid");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("MovieApp.Models.ShowBinge", b =>
                {
                    b.Property<int?>("showId")
                        .HasColumnType("int");

                    b.Property<int?>("bingeId")
                        .HasColumnType("int");

                    b.HasKey("showId", "bingeId");

                    b.HasIndex("bingeId");

                    b.ToTable("ShowBinges");
                });

            modelBuilder.Entity("MovieApp.Models.ShowTag", b =>
                {
                    b.Property<int?>("showId")
                        .HasColumnType("int");

                    b.Property<int?>("tagId")
                        .HasColumnType("int");

                    b.HasKey("showId", "tagId");

                    b.HasIndex("tagId");

                    b.ToTable("ShowTags");
                });

            modelBuilder.Entity("MovieApp.Models.Tag", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Bingeid")
                        .HasColumnType("int");

                    b.Property<int?>("Userid")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Bingeid");

                    b.HasIndex("Userid");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MovieApp.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MovieApp.Models.Binge", b =>
                {
                    b.HasOne("MovieApp.Models.User", null)
                        .WithMany("binges")
                        .HasForeignKey("Userid");
                });

            modelBuilder.Entity("MovieApp.Models.Show", b =>
                {
                    b.HasOne("MovieApp.Models.User", null)
                        .WithMany("favoriteShows")
                        .HasForeignKey("Userid");
                });

            modelBuilder.Entity("MovieApp.Models.ShowBinge", b =>
                {
                    b.HasOne("MovieApp.Models.Binge", "binge")
                        .WithMany("showBinges")
                        .HasForeignKey("bingeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieApp.Models.Show", "show")
                        .WithMany("showBinges")
                        .HasForeignKey("showId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("binge");

                    b.Navigation("show");
                });

            modelBuilder.Entity("MovieApp.Models.ShowTag", b =>
                {
                    b.HasOne("MovieApp.Models.Show", "show")
                        .WithMany("showTags")
                        .HasForeignKey("showId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieApp.Models.Tag", "tag")
                        .WithMany("showTags")
                        .HasForeignKey("tagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("show");

                    b.Navigation("tag");
                });

            modelBuilder.Entity("MovieApp.Models.Tag", b =>
                {
                    b.HasOne("MovieApp.Models.Binge", null)
                        .WithMany("tags")
                        .HasForeignKey("Bingeid");

                    b.HasOne("MovieApp.Models.User", null)
                        .WithMany("favoriteTags")
                        .HasForeignKey("Userid");
                });

            modelBuilder.Entity("MovieApp.Models.Binge", b =>
                {
                    b.Navigation("showBinges");

                    b.Navigation("tags");
                });

            modelBuilder.Entity("MovieApp.Models.Show", b =>
                {
                    b.Navigation("showBinges");

                    b.Navigation("showTags");
                });

            modelBuilder.Entity("MovieApp.Models.Tag", b =>
                {
                    b.Navigation("showTags");
                });

            modelBuilder.Entity("MovieApp.Models.User", b =>
                {
                    b.Navigation("binges");

                    b.Navigation("favoriteShows");

                    b.Navigation("favoriteTags");
                });
#pragma warning restore 612, 618
        }
    }
}
